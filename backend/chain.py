from dotenv import load_dotenv
from langchain_groq import ChatGroq
from langchain_core.output_parsers import JsonOutputParser
from langchain_core.exceptions import OutputParserException
import os


load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '..', '.env'))

api_key = os.getenv("GROQ_CLOUD_API_KEY")

class Chain():
    def __init__(self):
        self.llm = ChatGroq(temperature=0, groq_api_key=api_key, model_name="llama3-8b-8192")
        
    def extract_job_posting(self, page_data):
        prompt = f"""You are a helpful assistant that can answer questions and help with tasks. 
        ###SCRAPED TEXT FROM WEBSITE:
        {page_data}
        ### INSTRUCTION:
        Your job is to extract the job posting and retun them in JSON format containing following keys: `role`, `experience`, `skills` and `description`.
        Only return the valid JSON.
        ### VALID JSON (NO PREAMBLE)
        """
        
        res = self.llm.invoke(prompt)
        parser = JsonOutputParser()
        res = parser.parse(res.content)
        return res if isinstance(res, list) else [res]
    
    def wrtie_a_cold_email(self, job_description, metadata):
        prompt = f"""
        ### JOB DESCRIPTION:
        {job_description}
        ### INSTRUCTION:
        You are an expert career assistant helping job seekers craft personalized, professional, and compelling cold emails to recruiters and hiring managers.
        Today you are helping Prabodh Shewalkar, a senior software engineer at Cimpress.
        Generate a cold email that:
        - Highlights why the candidate is a strong fit for the job.
        - Has a friendly and professional tone.
        - Avoids excessive flattery or generic phrases.
        - Ends with a soft call to action (e.g., interest in a conversation, referral, or opportunity to connect).
        - MENTION THAT: I love to tell you that this email is generated by a tool built by the candidate as part of an AI-powered career project — designed to personalize applications by aligning specific projects with job descriptions.
        - Uses selected `projects` as examples to illustrate relevant skills — without suggesting these are the only accomplishments.
        Use the most relevant from the following list of `projects` to support the email.
        {list(metadata.items())}
        ### OUTPUT:
        - NO PREAMBLE
        - ONLY EMAIL SUBJECT AND BODY 
        - NO OTHER TEXT OR MARKDOWN
        NO PREAMBLE
        """
        res = self.llm.invoke(prompt)
        return res.content